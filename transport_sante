// filepath: c:\Users\hp\Desktop\omnidoc\transport_sante\transport_sante\lib\screens\mission_tracking_screen.dart
import 'package:flutter/material.dart';
import '../styles/colors.dart';
import '../api/mission_api.dart';
import '../api/material_api.dart';
import '../api/vehicle_api.dart';
import '../api/chat_api.dart';
import '../services/firebase_notification_service.dart';
import 'package:intl/intl.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:geolocator/geolocator.dart' as geo;
import '../api/patient_api.dart';
import '../api/user_api.dart';
import 'package:provider/provider.dart';
import '../services/mission_service.dart';
import '../services/user_service.dart';
import 'package:geocoding/geocoding.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:google_maps_webservice/places.dart';
import 'dart:math' as math;
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../widgets/home/mission_tracking/mission_header.dart';
import '../widgets/home/mission_tracking/mission_steps.dart';
import '../widgets/home/mission_tracking/destination_card.dart';
import '../widgets/home/mission_tracking/location_card.dart';
import '../widgets/home/mission_tracking/materials_section.dart';
import '../widgets/home/mission_tracking/step_gif.dart';
import '../services/mission_tracking/mission_tracking_methods.dart';
import '../screens/chat_screen.dart';
import '../config/api_config.dart';
import 'dart:async';
import 'package:flutter/services.dart';

class MissionTrackingScreen extends StatefulWidget {
  final int missionId;
  final Map<String, dynamic> missionData;

  const MissionTrackingScreen({
    Key? key,
    required this.missionId,
    required this.missionData,
  }) : super(key: key);

  @override
  _MissionTrackingScreenState createState() => _MissionTrackingScreenState();
}

class _MissionTrackingScreenState extends State<MissionTrackingScreen>
    with SingleTickerProviderStateMixin, AutomaticKeepAliveClientMixin {
  static const String baseUrl =
      'https://devregulation.francecentral.cloudapp.azure.com:5010';

  Map<String, dynamic> _missionData = {};
  List<Map<String, dynamic>> _selectedMaterials = [];
  bool _isLoading = false;
  bool _isInitialized = false;
  bool _isMapReady = false;
  bool _isAmbulancier = false;

  late TimeOfDay _heureArrivee;
  late TimeOfDay _heureAffectation;
  late TimeOfDay _heureRedepart;
  late TimeOfDay _heureFin;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  TextEditingController _quantityController = TextEditingController();
  TextEditingController _destinationController = TextEditingController();
  TextEditingController messageController = TextEditingController();

  GoogleMapController? _mapController;
  Set<Marker> _markers = {};
  LatLng? _missionLocation;
  final places =
      GoogleMapsPlaces(apiKey: 'AIzaSyBmnUN64iSMgThm_AwB4iYs-rYlQSX6jDw');
  final Map<String, String> _addressCache = {};

  List<Map<String, dynamic>> _availableMaterials = [];
  Map<String, dynamic>? _selectedMaterial;
  String? _ambulanceId;

  List<Map<String, dynamic>> messages = [];
  String? currentUserId;
  String? currentUserName;
  bool isChatExpanded = false;

  bool _isSocketConnected = false;
  bool _isLoadingMessages = false;
  Timer? _reconnectTimer;
  int _reconnectAttempts = 0;
  static const int maxReconnectAttempts = 5;

  @override
  bool get wantKeepAlive => true;

  @override
  void initState() {
    super.initState();
    _missionData = widget.missionData;
    _setupAnimations();
    _initializeData();
    _loadDataInBackground();
    _initializeChat();
    _loadUsedMaterials();
    _loadSelectedMaterialsLocally();
  }

  @override
  Widget build(BuildContext context) {
    super.build(context);

    return Scaffold(
      appBar: _buildAppBar(),
      body: AnimatedSwitcher(
        duration: const Duration(milliseconds: 300),
        child: _buildMainContent(),
      ),
      bottomNavigationBar: _buildBottomNavBar(),
    );
  }

  Widget _buildMainContent() {
    return SingleChildScrollView(
      child: Column(
        children: [
          MissionHeader(missionData: _missionData),
          const SizedBox(height: 16),
          if (_missionData['heure_arrivee'] != null) DestinationCard(missionData: _missionData),
          const SizedBox(height: 16),
          if (_missionData['adresse'] != null) LocationCard(missionData: _missionData),
          if (_isAmbulancier) MaterialsSection(selectedMaterials: _selectedMaterials),
          const SizedBox(height: 16),
          StepGif(missionData: _missionData),
        ],
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      title: const Text('Suivi de Mission'),
      backgroundColor: AppColors.primaryColor,
      foregroundColor: Colors.white,
      elevation: 0,
      actions: [
        IconButton(
          icon: Icon(Icons.message, color: Colors.white),
          tooltip: 'AccÃ©der au chat',
          onPressed: () {
            if (_missionData['id'] != null) {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ChatScreen(missionId: _missionData['id']),
                ),
              );
            }
          },
        ),
      ],
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(
          bottom: Radius.circular(20),
        ),
      ),
    );
  }

  Widget _buildBottomNavBar() {
    return Container(
      padding: EdgeInsets.symmetric(
        horizontal: MediaQuery.of(context).size.width * 0.05,
        vertical: MediaQuery.of(context).size.height * 0.02,
      ),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, -5),
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          Expanded(
            child: ElevatedButton.icon(
              onPressed: _handleNextStep,
              icon: Icon(Icons.arrow_forward),
              label: Text(_getNextStepButtonText()),
            ),
          ),
          SizedBox(width: MediaQuery.of(context).size.width * 0.05),
          Expanded(
            child: ElevatedButton(
              onPressed: _handleLocationButton,
              child: Text('Localiser'),
            ),
          ),
        ],
      ),
    );
  }

  // Other methods and logic remain unchanged
}